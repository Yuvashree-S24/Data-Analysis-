 import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from datetime import datetime
import datetime

data=pd.read_csv("USvideos.csv")
data.head(4)
data.shape
data.info()
data=data.drop_duplicates()
data.shape
data.describe()

col_remove=['thumbnail_link','description'] #removing the columns
data=data.drop(columns=col_remove)
data.info()

data["trending_date"]=data["trending_date"].apply(lambda x: datetime.datetime.strptime(x,'%y.%d.%m'))
data.head(3)

data['publish_time']=pd.to_datetime(data['publish_time'])
data.head(2)

data['publish_month']=data['publish_time'].dt.month #fetching the values from the columns
data['publish_day']=data['publish_time'].dt.day
data['publish_hour']=data['publish_time'].dt.hour
data.head(2)

print(sorted(data["category_id"].unique()))
[1,2,10,15,17,20,22,23,24,25,26,27,28,29,30,43]
#creating a column
data['category_name']=np.nan
data.loc[(data['category_id']==1),'category_name']='Film and Animations'
data.loc[(data['category_id']==2),'category_name']='Autos and Vehicles'
data.loc[(data['category_id']==10),'category_name']='Music'
data.loc[(data['category_id']==15),'category_name']='Pets and Animanls'
data.loc[(data['category_id']==17),'category_name']='Sports'
data.loc[(data['category_id']==19),'category_name']='Travel and Events'
data.loc[(data['category_id']==20),'category_name']='Gaming'
data.loc[(data['category_id']==22),'category_name']='Comedy'
data.loc[(data['category_id']==23),'category_name']='Entertaiment'
data.loc[(data['category_id']==24),'category_name']='News and Politics'
data.loc[(data['category_id']==25),'category_name']='How to and Style'
data.loc[(data['category_id']==26),'category_name']='Education'
data.loc[(data['category_id']==27),'category_name']='Science and Technology'
data.loc[(data['category_id']==28),'category_name']='Non profits and Activites'
data.loc[(data['category_id']==29),'category_name']='Movies'
data.loc[(data['category_id']==30),'category_name']='Shows'
data.loc[(data['category_id']==43),'category_name']='People and Blogs'
data.head()

data['year']=data['publish_time'].dt.year
yearly_counts=data.groupby('year')['video_id'].count()
yearly_counts.plot(kind="bar",xlabel="year",ylabel="Total publish count",title="Total publish video per year")
plt.show()

data['year']=data['publish_time'].dt.year
yearly_counts=data.groupby('year')['video_id'].count()
yearly_counts.plot(kind="bar",xlabel="year",ylabel="Total publish count",title="Total publish video per year")
plt.show()

#group the data by category name and calculate the sum of views in each category
category_view=data.groupby('category_name')['views'].sum().reset_index()

#sort the categories by views in descending order
top_cat=category_view.sort_values(by="views",ascending=False).head(5)
plt.bar(top_cat['category_name'],top_cat['views'])
plt.xlabel("Category Name",fontsize=12)
plt.ylabel("Total Views",fontsize=12)
plt.title("Top 5 categories",fontsize=15)
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

plt.figure(figsize=(12,8)) #lenght and breadth of the figure
sns.countplot(x="category_name",data=data,order=data['category_name'].value_counts().index)
plt.xticks(rotation=90)
plt.title("Video count by category")
plt.show()

#count the no.videos published per hour
videos_per_hour=data['publish_hour'].value_counts().sort_index()
plt.figure(figsize=(12,6))
sns.barplot(x=videos_per_hour.index, y=videos_per_hour.values,palette='rocket')
plt.title("Number of Videos Published per hour")
plt.xlabel("Hour of day")
plt.ylabel("Number of Videos")
plt.xticks(rotation=45)
plt.show()

data['publish_time']=pd.to_datetime(data['publish_time'])
data['publish_date']=data['publish_time'].dt.date
video_count=data.groupby('publish_date').size()
plt.figure(figsize=(12,6))
sns.lineplot(data=video_count)
plt.title("Videos Published over Time")
plt.xlabel("Publish Date")
plt.ylabel("Number of Videos")
plt.xticks(rotation=45)
plt.show()

sns.scatterplot(data=data,x='views',y="likes")
plt.title("Views Vs Likes")
plt.xlabel("Views")
plt.ylabel("Likes")
plt.show()

plt.figure(figsize=(14,8))
#adjust->used to adjust the parameter w and h are horizontal and vertical spacing
plt.subplots_adjust(wspace=0.2,hspace=0.4,top=0.9)
plt.subplot(2,2,1)
g=sns.countplot(x="comments_disabled",data=data)
g.set_title("Comments Disabled",fontsize=16)
plt.subplot(2,2,2)
g1=sns.countplot(x="ratings_disabled",data=data)
g1.set_title("Rating Disabled",fontsize=16)
plt.subplot(2,2,3)
g2=sns.countplot(x="video_error_or_removed",data=data)
g2.set_title("Video Error or Removed",fontsize=16)
plt.show()

#corelation-> refers to the statistical relation or association bwt 2 or more variables it helps us to understand how one changes are related to another changes
corr_mat=data['views'].corr(data["likes"])
corr_mat
